version: '3.8'

services:
  # CUDA Sentinel GPU Monitoring
  cuda-sentinel:
    build: .
    container_name: cuda-sentinel
    restart: unless-stopped
    ports:
      - "8081:8080"  # Changed to avoid conflict with an existing instance
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=all
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    command: ["cuda-sentinel", "server", "--host", "0.0.0.0", "--port", "8080", "--interval", "10"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Prometheus (Optional - metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: cuda-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/gpu_rules.yml:/etc/prometheus/gpu_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    depends_on:
      - cuda-sentinel

  # Grafana (Optional - visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: cuda-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/ultimate-dashboard.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

  # AlertManager (Optional - alerting)
  # alertmanager:
  #   image: prom/alertmanager:latest
  #   container_name: cuda-alertmanager
  #   restart: unless-stopped
  #   ports:
  #     - "9093:9093"
  #   volumes:
  #     - ./docker/alertmanager.yml:/etc/alertmanager/alertmanager.yml
  #     - alertmanager_data:/alertmanager
  #   depends_on:
  #     - prometheus

volumes:
  prometheus_data:
  grafana_data:
  # alertmanager_data:
